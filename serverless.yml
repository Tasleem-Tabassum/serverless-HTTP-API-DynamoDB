service: serverless-task

custom:
  tableName: '${self:service}-user-table-${self:provider.stage}'

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: 'us-east-1'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn"] }
  environment:
    USERS_TABLE: ${self:custom.tableName}

plugins:
  - serverless-offline

functions:
  home:
    handler: dist/index.handler
    events:
      - httpApi:
          path: /
          method: GET
  signUp:
    handler: dist/src/handler.signUp
    events:
      - httpApi:
          path: /signup
          method: POST
  login:
    handler: dist/src/handler.login
    events:
      - httpApi:
          path: /login
          method: POST
  getUser:
    handler: dist/src/handler.getUser
    events:
      - httpApi:
          path: /getUser
          method: GET
  updateUser:
    handler: dist/src/handler.updateUser
    events:
      - httpApi:
          path: /updateUser
          method: PATCH
  changePassword:
    handler: dist/src/handler.changePassword
    events:
      - httpApi:
          path: /changePassword
          method: PATCH

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: "UserName"
            AttributeType: "S"
          - AttributeName: "Password"
            AttributeType: "S"
          - AttributeName: "Name"
            AttributeType: "S"
          - AttributeName: "MobileNumber"
            AttributeType: "N"
        KeySchema:
          - AttributeName: "UserName"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${self:custom.tableName}
